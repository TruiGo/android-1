<?xml version="1.0" encoding="UTF-8"?>
<project name="jitsi-android" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--target name="-pre-build">
    </target-->

    <!-- before compilation clears libs folder and populated
     with all the libraries and binaries we use -->
    <target name="-pre-compile">
      <delete dir="libs"/>
      <mkdir dir="libs"/>
      <copy todir="libs">
        <fileset dir="lib/installer-exclude">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="lib/native">
          <include name="**/*"/>
        </fileset>
      </copy>
    </target>

    <!-- after compilation has finished
     rename some package names.
     sip protocol, to use our lib version not the one bundled into android
     jabber protocol, libjitsi and fmj, to use libs from desktop version
     without modifications
     -->
    <target name="-post-compile">

        <!--delete dir="${out.classes.absolute.dir}/java"/>
        <delete dir="${out.classes.absolute.dir}/javax"/-->
        <!--delete file="libs/java-stubs.jar"/-->

        <!-- target to rename packages in class files outside jar file -->
        <taskdef name="package-rename"
            classname="org.jitsi.util.asm.PackageRenamer"
            classpath="lib/os-specific/android/installer-exclude/package-renamer.jar:lib/os-specific/android/installer-exclude/asm-commons-4.1.jar:lib/os-specific/android/installer-exclude/asm-4.1.jar"/>
        <!-- rename class that were just compiled -->
        <package-rename>
            <fileset dir="${out.classes.absolute.dir}"/>
            <rule pattern="java.awt.**"
                  result="org.jitsi.android.util.java.awt.@1"/>
            <rule pattern="javax.swing.**"
                  result="org.jitsi.android.util.javax.swing.@1"/>
            <!--rule pattern="java.beans.**"
                  result="org.jitsi.android.util.java.beans.@1"/-->

            <rule pattern="org.xmlpull.v1.**"
                  result="org.jitsi.org.xmlpull.v1.@1"/>

            <rule pattern="javax.sip.**"
                  result="org.jitsi.javax.sip.@1"/>
            <rule pattern="gov.nist.core.**"
                  result="org.jitsi.gov.nist.core.@1"/>
            <rule pattern="gov.nist.javax.sip.**"
                  result="org.jitsi.gov.nist.javax.sip.@1"/>
        </package-rename>

        <!-- task to rename packages in jar files -->
        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
            classpath="lib/os-specific/android/installer-exclude/jarjar.jar"/>

        <!-- renames packages as different versions are used in devices -->
        <jarjar jarfile="libs/jain-sdp-1.jar">
            <zipfileset src="libs/jain-sdp.jar"/>
            <rule pattern="javax.sip.**"
                  result="org.jitsi.javax.sip.@1"/>
            <rule pattern="gov.nist.core.**"
                  result="org.jitsi.gov.nist.core.@1"/>
            <rule pattern="gov.nist.javax.sip.**"
                  result="org.jitsi.gov.nist.javax.sip.@1"/>
        </jarjar>
        <move file="libs/jain-sdp-1.jar" tofile="libs/jain-sdp.jar"/>

        <!-- renaming packages in order to use vanilla smack in android -->
        <jarjar jarfile="libs/smack-1.jar">
            <zipfileset src="libs/smack.jar"/>
            <rule pattern="org.xmlpull.v1.**"
                  result="org.jitsi.org.xmlpull.v1.@1"/>
            <rule pattern="java.beans.**"
                  result="org.jitsi.android.util.java.beans.@1"/>
            <rule pattern="javax.security.sasl.**"
                  result="org.apache.harmony.javax.security.sasl.@1"/>
            <rule pattern="javax.security.auth.**"
                  result="org.apache.harmony.javax.security.auth.@1"/>
        </jarjar>
        <move file="libs/smack-1.jar" tofile="libs/smack.jar"/>
        <!-- renaming packages in order to use vanilla smack in android -->
        <jarjar jarfile="libs/smackx-1.jar">
            <zipfileset src="libs/smackx.jar"/>
            <rule pattern="org.xmlpull.v1.**"
                  result="org.jitsi.org.xmlpull.v1.@1"/>
        </jarjar>
        <move file="libs/smackx-1.jar" tofile="libs/smackx.jar"/>

        <!-- fix loading some classes -->
        <jarjar jarfile="libs/libjitsi-1.jar">
            <zipfileset src="libs/libjitsi.jar"/>
            <rule pattern="java.awt.**"
                  result="org.jitsi.android.util.java.awt.@1"/>
            <rule pattern="javax.swing.**"
                  result="org.jitsi.android.util.javax.swing.@1"/>
            <rule pattern="javax.sound.**"
                  result="org.jitsi.android.util.javax.sound.@1"/>
        </jarjar>
        <move file="libs/libjitsi-1.jar" tofile="libs/libjitsi.jar"/>
        <jarjar jarfile="libs/fmj-1.jar">
            <zipfileset src="libs/fmj.jar"/>
            <rule pattern="java.awt.**"
                  result="org.jitsi.android.util.java.awt.@1"/>
            <rule pattern="javax.swing.**"
                  result="org.jitsi.android.util.javax.swing.@1"/>
            <rule pattern="javax.sound.**"
                  result="org.jitsi.android.util.javax.sound.@1"/>
        </jarjar>
        <move file="libs/fmj-1.jar" tofile="libs/fmj.jar"/>

        <!-- and finally the stubs we use for common java
         packages that are missing in android, in order to
         use the desktop version of files without modification
         and for easy merging-->
        <jarjar jarfile="libs/java-stubs-1.jar">
            <zipfileset src="libs/java-stubs.jar"/>
            <rule pattern="java.awt.**"
                  result="org.jitsi.android.util.java.awt.@1"/>
            <rule pattern="java.beans.**"
                  result="org.jitsi.android.util.java.beans.@1"/>
            <rule pattern="javax.sound.**"
                  result="org.jitsi.android.util.javax.sound.@1"/>
            <rule pattern="javax.swing.**"
                  result="org.jitsi.android.util.javax.swing.@1"/>
        </jarjar>
        <move file="libs/java-stubs-1.jar" tofile="libs/java-stubs.jar"/>

    </target>

    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

    <target name="compile" depends="-compile"/>

    <target name="debug-install" depends="debug">
        <copy file="./bin/jitsi-android-debug.apk"
            tofile="./bin/classes/jitsi-android.apk"/>
    </target>

    <target name="adb-install">
        <exec executable="${sdk.dir}/platform-tools/adb" >
            <arg line=" install -r ./bin/jitsi-android-debug.apk"/>
        </exec>
    </target>

    <target name="rebuild-and-deploy"
        depends="-pre-compile,compile,-post-compile,debug-install,adb-install"
        />
</project>
